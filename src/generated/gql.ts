/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "fragment CategoryFields on CategoryTreeItem {\n  name\n  path\n  entityId\n}": types.CategoryFieldsFragmentDoc,
    "query GetCategories {\n  site {\n    categoryTree {\n      ...CategoryFields\n      children {\n        ...CategoryFields\n      }\n    }\n  }\n}": types.GetCategoriesDocument,
    "query GetProducts {\n  site {\n    products {\n      edges {\n        node {\n          ...Product\n        }\n      }\n    }\n  }\n}": types.GetProductsDocument,
    "query GetProductsCollection($entityId: Int!) {\n  site {\n    category(entityId: $entityId) {\n      products {\n        edges {\n          node {\n            ...Product\n          }\n        }\n      }\n    }\n  }\n}": types.GetProductsCollectionDocument,
    "query GetProductsByIds($entityIds: [Int!]) {\n  site {\n    products(entityIds: $entityIds) {\n      edges {\n        node {\n          ...Product\n        }\n      }\n    }\n  }\n}": types.GetProductsByIdsDocument,
    "fragment ProductOption on CatalogProductOption {\n  __typename\n  entityId\n  displayName\n  isRequired\n  ... on MultipleChoiceOption {\n    displayStyle\n    values(first: 5) {\n      edges {\n        node {\n          entityId\n          isDefault\n          ... on SwatchOptionValue {\n            hexColors\n            imageUrl(width: 200)\n            label\n            isSelected\n          }\n          ... on MultipleChoiceOptionValue {\n            entityId\n            label\n            isSelected\n          }\n          ... on ProductPickListOptionValue {\n            entityId\n            label\n            isSelected\n          }\n        }\n      }\n    }\n  }\n  ... on NumberFieldOption {\n    entityId\n    displayName\n  }\n  ... on TextFieldOption {\n    entityId\n    displayName\n  }\n  ... on MultiLineTextFieldOption {\n    entityId\n    displayName\n  }\n  ... on FileUploadFieldOption {\n    entityId\n    displayName\n  }\n  ... on DateFieldOption {\n    entityId\n    displayName\n  }\n  ... on CheckboxOption {\n    entityId\n    displayName\n  }\n}\n\nfragment ProductVariantAllFields on Variant {\n  id\n  entityId\n  sku\n  upc\n  isPurchasable\n  prices {\n    price {\n      value\n      currencyCode\n    }\n    priceRange {\n      min {\n        value\n        currencyCode\n      }\n      max {\n        value\n        currencyCode\n      }\n    }\n  }\n  options(first: 5) {\n    edges {\n      node {\n        entityId\n        displayName\n        values(first: 5) {\n          edges {\n            node {\n              entityId\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment ProductVariant on Variant {\n  id\n  entityId\n  sku\n  upc\n  isPurchasable\n  defaultImage {\n    ...ImageFields\n  }\n  prices {\n    price {\n      value\n      currencyCode\n    }\n  }\n}\n\nfragment Product on Product {\n  entityId\n  name\n  plainTextDescription\n  defaultImage {\n    ...ImageFields\n  }\n  prices {\n    price {\n      ...MoneyFields\n    }\n  }\n  variants(first: 5) {\n    edges {\n      node {\n        ...ProductVariant\n      }\n    }\n  }\n}\n\nfragment ProductAllFields on Product {\n  id\n  entityId\n  sku\n  upc\n  name\n  brand {\n    name\n  }\n  plainTextDescription\n  description\n  availabilityV2 {\n    status\n    description\n  }\n  defaultImage {\n    ...ImageFields\n  }\n  images {\n    edges {\n      node {\n        ...ImageFields\n      }\n    }\n  }\n  seo {\n    pageTitle\n    metaDescription\n    metaKeywords\n  }\n  path\n  prices {\n    price {\n      ...MoneyFields\n    }\n    priceRange {\n      min {\n        ...MoneyFields\n      }\n      max {\n        ...MoneyFields\n      }\n    }\n  }\n  createdAt {\n    utc\n  }\n  variants(first: 5) {\n    edges {\n      node {\n        ...ProductVariant\n      }\n    }\n  }\n  productOptions(first: 3) {\n    edges {\n      node {\n        ...ProductOption\n      }\n    }\n  }\n}\n\nfragment ImageFieldsSmall on Image {\n  url320wide: url(width: 320)\n}\n\nfragment ImageFields on Image {\n  url320wide: url(width: 320)\n  url640wide: url(width: 640)\n  url960wide: url(width: 960)\n  url1280wide: url(width: 1280)\n}\n\nfragment MoneyFields on Money {\n  value\n  currencyCode\n}": types.ProductOptionFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CategoryFields on CategoryTreeItem {\n  name\n  path\n  entityId\n}"): (typeof documents)["fragment CategoryFields on CategoryTreeItem {\n  name\n  path\n  entityId\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCategories {\n  site {\n    categoryTree {\n      ...CategoryFields\n      children {\n        ...CategoryFields\n      }\n    }\n  }\n}"): (typeof documents)["query GetCategories {\n  site {\n    categoryTree {\n      ...CategoryFields\n      children {\n        ...CategoryFields\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProducts {\n  site {\n    products {\n      edges {\n        node {\n          ...Product\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetProducts {\n  site {\n    products {\n      edges {\n        node {\n          ...Product\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProductsCollection($entityId: Int!) {\n  site {\n    category(entityId: $entityId) {\n      products {\n        edges {\n          node {\n            ...Product\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetProductsCollection($entityId: Int!) {\n  site {\n    category(entityId: $entityId) {\n      products {\n        edges {\n          node {\n            ...Product\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProductsByIds($entityIds: [Int!]) {\n  site {\n    products(entityIds: $entityIds) {\n      edges {\n        node {\n          ...Product\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetProductsByIds($entityIds: [Int!]) {\n  site {\n    products(entityIds: $entityIds) {\n      edges {\n        node {\n          ...Product\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProductOption on CatalogProductOption {\n  __typename\n  entityId\n  displayName\n  isRequired\n  ... on MultipleChoiceOption {\n    displayStyle\n    values(first: 5) {\n      edges {\n        node {\n          entityId\n          isDefault\n          ... on SwatchOptionValue {\n            hexColors\n            imageUrl(width: 200)\n            label\n            isSelected\n          }\n          ... on MultipleChoiceOptionValue {\n            entityId\n            label\n            isSelected\n          }\n          ... on ProductPickListOptionValue {\n            entityId\n            label\n            isSelected\n          }\n        }\n      }\n    }\n  }\n  ... on NumberFieldOption {\n    entityId\n    displayName\n  }\n  ... on TextFieldOption {\n    entityId\n    displayName\n  }\n  ... on MultiLineTextFieldOption {\n    entityId\n    displayName\n  }\n  ... on FileUploadFieldOption {\n    entityId\n    displayName\n  }\n  ... on DateFieldOption {\n    entityId\n    displayName\n  }\n  ... on CheckboxOption {\n    entityId\n    displayName\n  }\n}\n\nfragment ProductVariantAllFields on Variant {\n  id\n  entityId\n  sku\n  upc\n  isPurchasable\n  prices {\n    price {\n      value\n      currencyCode\n    }\n    priceRange {\n      min {\n        value\n        currencyCode\n      }\n      max {\n        value\n        currencyCode\n      }\n    }\n  }\n  options(first: 5) {\n    edges {\n      node {\n        entityId\n        displayName\n        values(first: 5) {\n          edges {\n            node {\n              entityId\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment ProductVariant on Variant {\n  id\n  entityId\n  sku\n  upc\n  isPurchasable\n  defaultImage {\n    ...ImageFields\n  }\n  prices {\n    price {\n      value\n      currencyCode\n    }\n  }\n}\n\nfragment Product on Product {\n  entityId\n  name\n  plainTextDescription\n  defaultImage {\n    ...ImageFields\n  }\n  prices {\n    price {\n      ...MoneyFields\n    }\n  }\n  variants(first: 5) {\n    edges {\n      node {\n        ...ProductVariant\n      }\n    }\n  }\n}\n\nfragment ProductAllFields on Product {\n  id\n  entityId\n  sku\n  upc\n  name\n  brand {\n    name\n  }\n  plainTextDescription\n  description\n  availabilityV2 {\n    status\n    description\n  }\n  defaultImage {\n    ...ImageFields\n  }\n  images {\n    edges {\n      node {\n        ...ImageFields\n      }\n    }\n  }\n  seo {\n    pageTitle\n    metaDescription\n    metaKeywords\n  }\n  path\n  prices {\n    price {\n      ...MoneyFields\n    }\n    priceRange {\n      min {\n        ...MoneyFields\n      }\n      max {\n        ...MoneyFields\n      }\n    }\n  }\n  createdAt {\n    utc\n  }\n  variants(first: 5) {\n    edges {\n      node {\n        ...ProductVariant\n      }\n    }\n  }\n  productOptions(first: 3) {\n    edges {\n      node {\n        ...ProductOption\n      }\n    }\n  }\n}\n\nfragment ImageFieldsSmall on Image {\n  url320wide: url(width: 320)\n}\n\nfragment ImageFields on Image {\n  url320wide: url(width: 320)\n  url640wide: url(width: 640)\n  url960wide: url(width: 960)\n  url1280wide: url(width: 1280)\n}\n\nfragment MoneyFields on Money {\n  value\n  currencyCode\n}"): (typeof documents)["fragment ProductOption on CatalogProductOption {\n  __typename\n  entityId\n  displayName\n  isRequired\n  ... on MultipleChoiceOption {\n    displayStyle\n    values(first: 5) {\n      edges {\n        node {\n          entityId\n          isDefault\n          ... on SwatchOptionValue {\n            hexColors\n            imageUrl(width: 200)\n            label\n            isSelected\n          }\n          ... on MultipleChoiceOptionValue {\n            entityId\n            label\n            isSelected\n          }\n          ... on ProductPickListOptionValue {\n            entityId\n            label\n            isSelected\n          }\n        }\n      }\n    }\n  }\n  ... on NumberFieldOption {\n    entityId\n    displayName\n  }\n  ... on TextFieldOption {\n    entityId\n    displayName\n  }\n  ... on MultiLineTextFieldOption {\n    entityId\n    displayName\n  }\n  ... on FileUploadFieldOption {\n    entityId\n    displayName\n  }\n  ... on DateFieldOption {\n    entityId\n    displayName\n  }\n  ... on CheckboxOption {\n    entityId\n    displayName\n  }\n}\n\nfragment ProductVariantAllFields on Variant {\n  id\n  entityId\n  sku\n  upc\n  isPurchasable\n  prices {\n    price {\n      value\n      currencyCode\n    }\n    priceRange {\n      min {\n        value\n        currencyCode\n      }\n      max {\n        value\n        currencyCode\n      }\n    }\n  }\n  options(first: 5) {\n    edges {\n      node {\n        entityId\n        displayName\n        values(first: 5) {\n          edges {\n            node {\n              entityId\n              label\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment ProductVariant on Variant {\n  id\n  entityId\n  sku\n  upc\n  isPurchasable\n  defaultImage {\n    ...ImageFields\n  }\n  prices {\n    price {\n      value\n      currencyCode\n    }\n  }\n}\n\nfragment Product on Product {\n  entityId\n  name\n  plainTextDescription\n  defaultImage {\n    ...ImageFields\n  }\n  prices {\n    price {\n      ...MoneyFields\n    }\n  }\n  variants(first: 5) {\n    edges {\n      node {\n        ...ProductVariant\n      }\n    }\n  }\n}\n\nfragment ProductAllFields on Product {\n  id\n  entityId\n  sku\n  upc\n  name\n  brand {\n    name\n  }\n  plainTextDescription\n  description\n  availabilityV2 {\n    status\n    description\n  }\n  defaultImage {\n    ...ImageFields\n  }\n  images {\n    edges {\n      node {\n        ...ImageFields\n      }\n    }\n  }\n  seo {\n    pageTitle\n    metaDescription\n    metaKeywords\n  }\n  path\n  prices {\n    price {\n      ...MoneyFields\n    }\n    priceRange {\n      min {\n        ...MoneyFields\n      }\n      max {\n        ...MoneyFields\n      }\n    }\n  }\n  createdAt {\n    utc\n  }\n  variants(first: 5) {\n    edges {\n      node {\n        ...ProductVariant\n      }\n    }\n  }\n  productOptions(first: 3) {\n    edges {\n      node {\n        ...ProductOption\n      }\n    }\n  }\n}\n\nfragment ImageFieldsSmall on Image {\n  url320wide: url(width: 320)\n}\n\nfragment ImageFields on Image {\n  url320wide: url(width: 320)\n  url640wide: url(width: 640)\n  url960wide: url(width: 960)\n  url1280wide: url(width: 1280)\n}\n\nfragment MoneyFields on Money {\n  value\n  currencyCode\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;